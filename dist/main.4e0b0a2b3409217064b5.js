(()=>{"use strict";class t{constructor(){this.colorTypes={0:"グレースケール",2:"RGB",3:"パレット",4:"グレースケール + アルファ",6:"RGB + アルファ"}}async readBytes(t,e,n){const i=t.slice(e,e+n),s=await i.arrayBuffer();return new Uint8Array(s)}bytesToUint32(t,e=0){if(e+3>=t.length)return 0;const n=t[e],i=t[e+1],s=t[e+2],a=t[e+3];return null==n||null==i||null==s||null==a?0:n<<24|i<<16|s<<8|a}bytesToUint16(t,e=0){if(e+1>=t.length)return 0;const n=t[e],i=t[e+1];return null==n||null==i?0:n<<8|i}bytesToString(t,e=0,n){const i=n?t.slice(e,n):t.slice(e);return Array.from(i).map(t=>String.fromCharCode(t)).join("")}bytesToHex(t){return Array.from(t).map(t=>t.toString(16).padStart(2,"0")).join("")}parseIHDR(t){if(t.length<13)throw new Error("IHDRチャンクのデータが不正です");const e=t[8],n=t[9],i=t[10],s=t[11],a=t[12];if(null==e||null==n||null==i||null==s||null==a)throw new Error("IHDRチャンクのデータが不正です");return{width:this.bytesToUint32(t,0),height:this.bytesToUint32(t,4),bitDepth:e,colorType:this.colorTypes[n]||`不明 (${n})`,compressionMethod:i,filterMethod:s,interlaceMethod:a}}parseTextChunk(t,e){const n={};try{if("tEXt"===e){const e=t.indexOf(0);if(-1!==e){const i=this.bytesToString(t,0,e),s=this.bytesToString(t,e+1);n[i]=s}}else if("iTXt"===e){const e=[];for(let n=0;n<t.length&&e.length<4;n++)0===t[n]&&e.push(n);if(e.length>=4){const i=this.bytesToString(t,0,e[0]),s=null!=e[0]&&e[0]+1<t.length?t[e[0]+1]:void 0,a=null!=s?s:0,o=null!=e[1]&&null!=e[2]?this.bytesToString(t,e[1]+1,e[2]):"",r=null!=e[2]&&null!=e[3]?this.bytesToString(t,e[2]+1,e[3]):"",l=null!=e[3]?this.bytesToString(t,e[3]+1):"";n[i]={text:l,language:o,translatedKeyword:r,compressed:1===a}}}}catch(e){n._raw_data=this.bytesToHex(t)}return n}parseTime(t){if(7!==t.length)return null;const e=this.bytesToUint16(t,0),n=t[2],i=t[3],s=t[4],a=t[5],o=t[6];return null==n||null==i||null==s||null==a||null==o?null:{year:e,month:n,day:i,hour:s,minute:a,second:o,datetime:`${e.toString().padStart(4,"0")}-${n.toString().padStart(2,"0")}-${i.toString().padStart(2,"0")} ${s.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}:${o.toString().padStart(2,"0")}`}}async analyze(t){const e=await this.readBytes(t,0,8),n=new Uint8Array([137,80,78,71,13,10,26,10]);for(let t=0;t<8;t++)if(e[t]!==n[t])throw new Error("無効なPNGファイルシグネチャです");const i={fileName:t.name,fileSize:t.size,chunks:[],imageInfo:null,textMetadata:{},timestamp:null,physicalDimensions:null,rawChunks:[]};let s=8;for(;s<t.size&&!(s+8>t.size);){const e=await this.readBytes(t,s,8),n=this.bytesToUint32(e,0),a=this.bytesToString(e,4,8);if(s+8+n+4>t.size)break;const o=await this.readBytes(t,s+8,n),r=await this.readBytes(t,s+8+n,4),l=this.bytesToUint32(r,0),d={type:a,length:n,crc:`0x${l.toString(16).padStart(8,"0")}`,dataPreview:this.bytesToHex(o.slice(0,Math.min(32,o.length)))+(o.length>32?"...":"")};if(i.chunks.push(d),i.rawChunks.push({type:a,length:n,data:this.bytesToHex(o),crc:l}),"IHDR"===a)i.imageInfo=this.parseIHDR(o);else if(["tEXt","zTXt","iTXt"].includes(a)){const t=this.parseTextChunk(o,a);Object.assign(i.textMetadata,t)}else if("tIME"===a)i.timestamp=this.parseTime(o);else if("IEND"===a)break;s+=8+n+4}return i}}class e{constructor(t){this.zoom=1,this.position={x:0,y:0},this.isDragging=!1,this.dragStart={x:0,y:0},this.imageElement=null,this.naturalSize={width:0,height:0},this.container=t}render(t,e){t?(this.container.innerHTML=`\n            \x3c!-- 画像統計情報カード --\x3e\n            <div class="preview-stats">\n                <div class="preview-card">\n                    <i class="fas fa-ruler preview-icon blue"></i>\n                    <div class="preview-content">\n                        <p class="preview-label">元サイズ</p>\n                        <p class="preview-value" id="naturalSize">読み込み中...</p>\n                    </div>\n                </div>\n                <div class="preview-card">\n                    <i class="fas fa-info preview-icon green"></i>\n                    <div class="preview-content">\n                        <p class="preview-label">アスペクト比</p>\n                        <p class="preview-value" id="aspectRatio">読み込み中...</p>\n                    </div>\n                </div>\n                <div class="preview-card">\n                    <i class="fas fa-palette preview-icon purple"></i>\n                    <div class="card-content">\n                        <p class="preview-label">ビット深度</p>\n                        <p class="preview-value">${e?.imageInfo?.bitDepth||"N/A"} ビット</p>\n                    </div>\n                </div>\n                <div class="preview-card">\n                    <i class="fas fa-download preview-icon orange"></i>\n                    <div class="card-content">\n                        <p class="preview-label">ファイルサイズ</p>\n                        <p class="preview-value">${this.formatFileSize(e?.fileSize||0)}</p>\n                    </div>\n                </div>\n            </div>\n\n            \x3c!-- 画像表示コンテナ --\x3e\n            <div class="image-container">\n                <div class="image-header">\n                    <div class="image-title">\n                        <i class="fas fa-eye"></i>\n                        <span>画像プレビュー</span>\n                        <span class="zoom-badge" id="zoomBadge">ズーム: 100%</span>\n                    </div>\n                    \x3c!-- 画像操作コントロール --\x3e\n                    <div class="image-controls">\n                        <button class="control-button" id="zoomOut" title="縮小">\n                            <i class="fas fa-search-minus"></i>\n                        </button>\n                        <button class="control-button" id="zoomIn" title="拡大">\n                            <i class="fas fa-search-plus"></i>\n                        </button>\n                        <button class="control-button" id="resetZoom" title="リセット">\n                            <i class="fas fa-undo"></i>\n                        </button>\n                        <button class="control-button" id="downloadImage" title="ダウンロード">\n                            <i class="fas fa-download"></i>\n                        </button>\n                    </div>\n                </div>\n                \x3c!-- 画像表示ビューポート --\x3e\n                <div class="image-viewport" id="imageViewport">\n                    <img class="preview-image" id="previewImage" src="${t}" alt="PNG プレビュー">\n                    <div class="zoom-info" id="zoomInfo" style="display: none;">100% ズーム</div>\n                </div>\n            </div>\n\n            \x3c!-- 色解析セクション（画像読み込み後に表示） --\x3e\n            <div class="color-analysis" id="colorAnalysis" style="display: none;">\n                <h3>色解析</h3>\n                <div class="color-section">\n                    <h4>平均色</h4>\n                    <div class="average-color" id="averageColor">\n                        <div class="spinner"></div>\n                        <span>色を解析中...</span>\n                    </div>\n                </div>\n                <div class="color-section">\n                    <h4>主要色</h4>\n                    <div class="dominant-colors" id="dominantColors"></div>\n                </div>\n            </div>\n        `,this.setupEventListeners(t,e)):this.container.innerHTML='\n                <div class="empty-state">\n                    <i class="fas fa-eye empty-icon"></i>\n                    <p>PNGファイルをアップロードしてプレビューを表示</p>\n                </div>\n            '}setupEventListeners(t,e){const n=document.getElementById("previewImage"),i=document.getElementById("imageViewport");document.getElementById("zoomBadge"),document.getElementById("zoomInfo"),n.onload=()=>{this.imageElement=n,this.naturalSize={width:n.naturalWidth,height:n.naturalHeight};const t=document.getElementById("naturalSize"),e=document.getElementById("aspectRatio");t&&(t.textContent=`${this.naturalSize.width} × ${this.naturalSize.height}`),e&&(e.textContent=this.calculateAspectRatio());const i=document.getElementById("colorAnalysis");i&&(i.style.display="block"),this.analyzeColors()};const s=document.getElementById("zoomIn"),a=document.getElementById("zoomOut"),o=document.getElementById("resetZoom"),r=document.getElementById("downloadImage");s&&(s.onclick=()=>{this.zoom=Math.min(1.5*this.zoom,10),this.updateImageTransform(),this.updateZoomDisplay()}),a&&(a.onclick=()=>{this.zoom=Math.max(this.zoom/1.5,.1),this.updateImageTransform(),this.updateZoomDisplay()}),o&&(o.onclick=()=>{this.zoom=1,this.position={x:0,y:0},this.updateImageTransform(),this.updateZoomDisplay()}),r&&(r.onclick=()=>{const n=document.createElement("a");n.href=t,n.download=e.fileName,n.click()}),i.onmousedown=t=>{this.zoom>1&&(this.isDragging=!0,this.dragStart={x:t.clientX-this.position.x,y:t.clientY-this.position.y},i.style.cursor="grabbing")},i.onmousemove=t=>{this.isDragging&&this.zoom>1&&(this.position={x:t.clientX-this.dragStart.x,y:t.clientY-this.dragStart.y},this.updateImageTransform())},i.onmouseup=()=>{this.isDragging=!1,i.style.cursor=this.zoom>1?"grab":"default"},i.onmouseleave=()=>{this.isDragging=!1,i.style.cursor=this.zoom>1?"grab":"default"},this.updateZoomDisplay()}updateImageTransform(){if(this.imageElement){const t=`scale(${this.zoom}) translate(${this.position.x/this.zoom}px, ${this.position.y/this.zoom}px)`;this.imageElement.style.transform=t}}updateZoomDisplay(){const t=document.getElementById("zoomBadge"),e=document.getElementById("zoomInfo"),n=document.getElementById("imageViewport"),i=Math.round(100*this.zoom);t&&(t.textContent=`ズーム: ${i}%`),e&&(1!==this.zoom?(e.textContent=`${i}% ズーム`,e.style.display="block"):e.style.display="none"),n&&(n.style.cursor=this.zoom>1?"grab":"default");const s=document.getElementById("zoomOut"),a=document.getElementById("zoomIn");s&&(s.disabled=this.zoom<=.1),a&&(a.disabled=this.zoom>=10)}calculateAspectRatio(){if(!this.naturalSize.width||!this.naturalSize.height)return"N/A";const t=(e,n)=>0===n?e:t(n,e%n),e=t(this.naturalSize.width,this.naturalSize.height);return`${this.naturalSize.width/e}:${this.naturalSize.height/e}`}formatFileSize(t){return t<1024?`${t} B`:t<1048576?`${(t/1024).toFixed(1)} KB`:`${(t/1048576).toFixed(1)} MB`}analyzeColors(){if(!this.imageElement)return;const t=document.createElement("canvas"),e=t.getContext("2d");if(e){t.width=Math.min(this.imageElement.naturalWidth,200),t.height=Math.min(this.imageElement.naturalHeight,200);try{e.drawImage(this.imageElement,0,0,t.width,t.height);const n=e.getImageData(0,0,t.width,t.height).data,i=new Map;let s=0,a=0,o=0;const r=n.length/4;for(let t=0;t<n.length&&!(t+3>=n.length);t+=4){const e=n[t]??0,r=n[t+1]??0,l=n[t+2]??0;if((n[t+3]??0)>128){s+=e,a+=r,o+=l;const t=32*Math.floor(e/32),n=`rgb(${t},${32*Math.floor(r/32)},${32*Math.floor(l/32)})`;i.set(n,(i.get(n)||0)+1)}}const l=`rgb(${Math.round(s/r)}, ${Math.round(a/r)}, ${Math.round(o/r)})`,d=Array.from(i.entries()).sort((t,e)=>e[1]-t[1]).slice(0,8).map(([t])=>t);this.displayColorAnalysis(l,d,Math.round(r))}catch(t){console.error("色解析に失敗しました:",t);const e=document.getElementById("averageColor");e&&(e.innerHTML='<span style="color: #dc2626;">色解析に失敗しました</span>')}}}displayColorAnalysis(t,e,n){const i=document.getElementById("averageColor");i&&(i.innerHTML=`\n            <div class="color-swatch" style="background-color: ${t};"></div>\n            <div class="color-info">\n                <div class="color-value">${t}</div>\n                <div class="color-description">${n.toLocaleString()} ピクセルから計算</div>\n            </div>\n        `);const s=document.getElementById("dominantColors");s&&(s.innerHTML=e.map(t=>{const e=t.match(/\d+/g);let n="N/A";return e&&e.length>=3&&(n=`${e.at(0)??"0"},${e.at(1)??"0"},${e.at(2)??"0"}`),`\n                <div class="dominant-color">\n                    <div class="dominant-swatch" style="background-color: ${t};" title="${t}"></div>\n                    <div class="dominant-value">${n}</div>\n                </div>\n            `}).join(""))}}class n{constructor(){this.currentMetadata=null,this.currentImageUrl=null,this.analyzer=new t;const n=document.getElementById("imagePreview");if(!n)throw new Error("画像プレビューコンテナが見つかりません");this.imagePreview=new e(n),this.initializeEventListeners()}initializeEventListeners(){const t=document.getElementById("uploadArea"),e=document.getElementById("uploadButton"),n=document.getElementById("fileInput"),i=document.getElementById("exportButton");if(!(t&&e&&n&&i))throw new Error("必要なDOM要素が見つかりません");n.addEventListener("change",t=>{const e=t.target;e.files&&e.files.length>0&&e.files[0]&&this.handleFile(e.files[0])}),e.addEventListener("click",()=>{n.click()}),t.addEventListener("click",()=>{n.click()}),t.addEventListener("dragover",e=>{e.preventDefault(),t.classList.add("drag-over")}),t.addEventListener("dragleave",()=>{t.classList.remove("drag-over")}),t.addEventListener("drop",e=>{e.preventDefault(),t.classList.remove("drag-over"),e.dataTransfer?.files&&e.dataTransfer.files.length>0&&e.dataTransfer.files[0]&&this.handleFile(e.dataTransfer.files[0])}),i.addEventListener("click",()=>{this.exportResults()}),document.querySelectorAll(".tab-button").forEach(t=>{t.addEventListener("click",()=>{const e=t.dataset.tab;e&&this.switchTab(e)})})}async handleFile(t){if(t.type.includes("png")){this.showLoading(!0),this.hideError(),this.currentImageUrl&&URL.revokeObjectURL(this.currentImageUrl);try{const e=await this.analyzer.analyze(t);this.currentMetadata=e,this.currentImageUrl=URL.createObjectURL(t),this.displayResults(e),this.showLoading(!1),this.switchTab("preview")}catch(t){const e=t instanceof Error?t.message:"PNGファイルの解析に失敗しました";this.showError(e),this.showLoading(!1)}}else this.showError("PNGファイルを選択してください")}displayResults(t){const e=document.getElementById("results");e&&(e.style.display="block");const n=document.getElementById("fileSize"),i=document.getElementById("dimensions"),s=document.getElementById("colorType"),a=document.getElementById("chunkCount");n&&(n.textContent=`${(t.fileSize/1024).toFixed(1)} KB`),i&&(i.textContent=`${t.imageInfo?.width||0} × ${t.imageInfo?.height||0}`),s&&(s.textContent=t.imageInfo?.colorType||"不明"),a&&(a.textContent=t.chunks.length.toString()),this.updateImageInfo(t.imageInfo),this.updateChunks(t.chunks),this.updateMetadata(t.textMetadata),this.updateTimestamp(t.timestamp),this.updateRawData(t.rawChunks),this.displayJSONTree(t,document.getElementById("fullJsonContainer")),this.currentImageUrl&&this.imagePreview.render(this.currentImageUrl,t)}updateImageInfo(t){const e=document.getElementById("imageInfoGrid");e&&(e.innerHTML=t?Object.entries(t).map(([t,e])=>`\n                <div class="info-item">\n                    <span class="info-label">${this.translateImageInfoKey(t)}</span>\n                    <span class="info-value">${e}</span>\n                </div>\n            `).join(""):"<p>画像情報が利用できません</p>")}translateImageInfoKey(t){return{width:"幅",height:"高さ",bitDepth:"ビット深度",colorType:"色タイプ",compressionMethod:"圧縮方式",filterMethod:"フィルター方式",interlaceMethod:"インターレース方式"}[t]||t}updateChunks(t){const e=document.getElementById("chunksContainer");e&&(e.innerHTML=t.map(t=>`\n            <div class="chunk-item">\n                <div class="chunk-header">\n                    <div style="display: flex; align-items: center; gap: 0.5rem;">\n                        <span class="chunk-type">${t.type}</span>\n                        <span class="chunk-info">長さ: ${t.length} バイト</span>\n                    </div>\n                    <span class="chunk-crc">CRC: ${t.crc}</span>\n                </div>\n                <div class="chunk-data">${t.dataPreview}</div>\n            </div>\n        `).join(""))}updateMetadata(t){const e=document.getElementById("metadataContainer");e&&(0!==Object.keys(t).length?e.innerHTML=Object.entries(t).map(([t,e])=>`\n                <div class="chunk-item">\n                    <h4 style="margin-bottom: 0.5rem; font-weight: 600;">${t}</h4>\n                    <div style="background-color: #f9fafb; padding: 0.75rem; border-radius: 0.375rem; font-size: 0.875rem; color: #6b7280; word-break: break-all;">\n                        ${"object"==typeof e?`<pre style="white-space: pre-wrap; margin: 0;">${JSON.stringify(e,null,2)}</pre>`:`<span>${e}</span>`}\n                    </div>\n                </div>\n            `).join(""):e.innerHTML='\n                <div class="empty-state">\n                    <i class="fas fa-info-circle empty-icon"></i>\n                    <p>このPNGファイルにはテキストメタデータが見つかりませんでした</p>\n                </div>\n            ')}updateTimestamp(t){const e=document.getElementById("timestampContainer");e&&(e.innerHTML=t?`\n            <div class="chunk-item">\n                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem;">\n                    <i class="fas fa-clock" style="color: #3b82f6;"></i>\n                    <h4 style="margin: 0; font-weight: 600;">作成時刻</h4>\n                </div>\n                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem;">\n                    ${Object.entries(t).filter(([t])=>"datetime"!==t).map(([t,e])=>`\n                        <div style="text-align: center; padding: 0.75rem; background-color: #f9fafb; border-radius: 0.375rem;">\n                            <div style="font-size: 0.875rem; color: #6b7280; text-transform: capitalize; margin-bottom: 0.25rem;">${this.translateTimestampKey(t)}</div>\n                            <div style="font-weight: bold;">${e}</div>\n                        </div>\n                    `).join("")}\n                </div>\n                <div style="margin-top: 1rem; text-align: center; font-size: 1.1rem; font-weight: 600; color: #374151;">\n                    ${t.datetime}\n                </div>\n            </div>\n        `:'\n                <div class="empty-state">\n                    <i class="fas fa-clock empty-icon"></i>\n                    <p>タイムスタンプ情報が見つかりませんでした</p>\n                </div>\n            ')}translateTimestampKey(t){return{year:"年",month:"月",day:"日",hour:"時",minute:"分",second:"秒"}[t]||t}updateRawData(t){const e=document.getElementById("rawDataContainer");e&&(e.innerHTML=t.map(t=>`\n            <div class="chunk-item">\n                <div style="padding: 1rem; border-bottom: 1px solid #e5e7eb; background-color: #f9fafb; display: flex; justify-content: space-between; align-items: center;">\n                    <span class="chunk-type">${t.type}</span>\n                    <span style="font-size: 0.875rem; color: #6b7280;">\n                        ${t.length} バイト | CRC: 0x${t.crc.toString(16).padStart(8,"0")}\n                    </span>\n                </div>\n                <div style="padding: 1rem;">\n                    <div style="font-family: monospace; font-size: 0.75rem; background-color: #f3f4f6; padding: 0.75rem; border-radius: 0.375rem; max-height: 8rem; overflow-y: auto; word-break: break-all;">\n                        ${t.data.match(/.{1,64}/g)?.join("\n")||t.data}\n                    </div>\n                </div>\n            </div>\n        `).join(""))}displayJSONTree(t,e,n={}){const i={showLen:!1,showType:!1,showBrackets:!0,showFoldmarker:!1,colors:{boolean:"#ff2929",null:"#ff2929",string:"#690",number:"#905",float:"#002f99"}};if(!e)return;if(e.innerHTML="",e.className="",!t||"object"!=typeof t||0===Object.keys(t).length)return e.className="text-center text-secondary",void(e.innerHTML="データがありません");const s={...i,...n,colors:{...i.colors,...n.colors||{}}},a=jsnview(t,s);e.appendChild(a)}switchTab(t){document.querySelectorAll(".tab-button").forEach(t=>{t.classList.remove("active")});const e=document.querySelector(`[data-tab="${t}"]`);e&&e.classList.add("active"),document.querySelectorAll(".tab-content").forEach(t=>{t.classList.remove("active")});const n=document.getElementById(`tab-${t}`);n&&n.classList.add("active")}exportResults(){if(!this.currentMetadata)return;const t=JSON.stringify(this.currentMetadata,null,2),e=new Blob([t],{type:"application/json"}),n=URL.createObjectURL(e),i=document.createElement("a");i.href=n,i.download=`${this.currentMetadata.fileName}_metadata.json`,i.click(),URL.revokeObjectURL(n)}showLoading(t){const e=document.getElementById("loading");e&&(e.style.display=t?"flex":"none")}showError(t){const e=document.getElementById("error");e&&(e.textContent=t,e.style.display="block")}hideError(){const t=document.getElementById("error");t&&(t.style.display="none")}}document.addEventListener("DOMContentLoaded",()=>{new n})})();
//# sourceMappingURL=main.4e0b0a2b3409217064b5.js.map